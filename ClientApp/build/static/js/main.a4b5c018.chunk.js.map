{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/Home.js","components/FetchData.js","components/Register.js","components/Login.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","Home","href","FetchData","forecasts","loading","populateWeatherData","contents","renderForecastsTable","id","fetch","response","json","data","aria-labelledby","map","forecast","key","date","temperatureC","temperatureF","summary","Register","email","password","password_confirmation","firstName","lastName","countryCode","number","handleSubmit","handleChange","event","Loading","standard","axios","post","withCredential","then","remove","console","log","resultCode","Report","success","failure","resultMessage","catch","error","alert","preventDefault","target","value","onSubmit","type","placeholder","onChange","required","Button","variant","Login","userName","warning","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a4b5c018.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n          <Container>\r\n            <NavbarBrand tag={Link} to=\"/\">Mekashron.TestProject</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/Register\">Register</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink tag={Link} className=\"text-dark\" to=\"/Login\">Login</NavLink>\r\n                            </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n                </NavItem>\r\n              </ul>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class Home extends Component {\r\n  static displayName = Home.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Hello, world!</h1>\r\n        <p>Welcome to your new single-page application, built with:</p>\r\n        <ul>\r\n          <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n          <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n          <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n        </ul>\r\n        <p>To help you get started, we have also set up:</p>\r\n        <ul>\r\n          <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n          <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n          <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n        </ul>\r\n        <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class FetchData extends Component {\r\n  static displayName = FetchData.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { forecasts: [], loading: true };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateWeatherData();\r\n  }\r\n\r\n  static renderForecastsTable(forecasts) {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {forecasts.map(forecast =>\r\n            <tr key={forecast.date}>\r\n              <td>{forecast.date}</td>\r\n              <td>{forecast.temperatureC}</td>\r\n              <td>{forecast.temperatureF}</td>\r\n              <td>{forecast.summary}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let contents = this.state.loading\r\n      ? <p><em>Loading...</em></p>\r\n      : FetchData.renderForecastsTable(this.state.forecasts);\r\n\r\n    return (\r\n      <div>\r\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n        <p>This component demonstrates fetching data from the server.</p>\r\n        {contents}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async populateWeatherData() {\r\n      const response = await fetch('weatherforecast');\r\n      debugger;\r\n    const data = await response.json();\r\n    this.setState({ forecasts: data, loading: false });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport { Report, Loading } from \"notiflix\";\r\nexport class Register extends Component {\r\n    static displayName = Register.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            password_confirmation: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            countryCode: \"\",\r\n            number: \"\",\r\n            loading: true,\r\n\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        Loading.standard();\r\n        const {\r\n            email,\r\n            password,\r\n            password_confirmation,\r\n            firstName,\r\n            lastName,\r\n            countryCode,\r\n            number\r\n        } = this.state;\r\n\r\n        axios.post('https://localhost:44332/account/registerUser', {\r\n\r\n            email: email,\r\n            password: password,\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            password_confirmation: password_confirmation,\r\n            countryCode: countryCode,\r\n            number: number,\r\n\r\n        },\r\n            { withCredential: true }).then(response => {\r\n                Loading.remove();\r\n                console.log(\"registration res\", response);\r\n                debugger;\r\n                if (response.data.resultCode > 0) {\r\n                    Report.success('Register Message', 'Register Complated', 'OK');\r\n                  \r\n                }\r\n                else {\r\n                    Report.failure('Register Error', response.data.resultMessage, 'OK');\r\n                   \r\n                }\r\n\r\n\r\n            }).catch(error => {\r\n                console.log(\"registration error\", error);\r\n                alert(error);\r\n            })\r\n        event.preventDefault();\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n\r\n\r\n            <form onSubmit={this.handleSubmit}>\r\n\r\n                <div className=\"input-group mb-3\">\r\n                    <input className=\"form-control\" type=\"email\" name=\"email\" placeholder=\"Email\" value={this.state.email} onChange={this.handleChange} />\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <input className=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password\" value={this.state.password} onChange={this.handleChange} />\r\n\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <input className=\"form-control\" type=\"password\" name=\"password_confirmation\" placeholder=\"Password confirmation\" value={this.state.password_confirmation} onChange={this.handleChange} required />\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <input className=\"form-control\" type=\"firstName\" name=\"firstName\" placeholder=\"First Name\" value={this.state.firstName} onChange={this.handleChange} required />\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n\r\n                    <input className=\"form-control\" type=\"lastName\" name=\"lastName\" placeholder=\"Last Name\" value={this.state.lastName} onChange={this.handleChange} required />\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n\r\n                    <input className=\"form-control\" type=\"countryCode\" name=\"countryCode\" placeholder=\"Country Code\" value={this.state.countryCode} onChange={this.handleChange} required />\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <input className=\"form-control\" type=\"number\" name=\"number\" placeholder=\"Phone Number\" value={this.state.number} onChange={this.handleChange} required />\r\n                </div>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Register\r\n                </Button>\r\n\r\n               \r\n            </form>\r\n\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-notifications/lib/notifications.css';\r\nimport { Report, Loading } from \"notiflix\";\r\nimport Button from 'react-bootstrap/Button';\r\nexport class Login extends Component {\r\n    static displayName = Login.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: \"\",\r\n            password: \"\",\r\n\r\n\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        Loading.standard();\r\n        const {\r\n            userName,\r\n            password,\r\n\r\n        } = this.state;\r\n\r\n        axios.post('account/loginUser', {\r\n\r\n            userName: userName,\r\n            password: password,\r\n\r\n\r\n        },\r\n            { withCredential: true }).then(response => {\r\n                Loading.remove();\r\n                console.log(\"login res\", response);\r\n                debugger;\r\n                if (response.data.resultCode >= 0) {\r\n                    Report.success('Login Message', 'Login Complated', 'OK');\r\n\r\n                }\r\n                else {\r\n                    Report.warning('Login Warning', response.data.resultMessage, 'OK');\r\n\r\n                }\r\n\r\n\r\n            }).catch(error => {\r\n                console.log(\"Login error\", error);\r\n                Loading.remove();\r\n                Report.failure('Login Error', error, 'OK');\r\n            })\r\n        event.preventDefault();\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n\r\n            <form onSubmit={this.handleSubmit}>\r\n\r\n                <div className=\"input-group mb-3\">\r\n                    <input className=\"form-control\" type=\"email\" name=\"userName\" placeholder=\"Email\" value={this.state.userName} onChange={this.handleChange} />\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                    <input className=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password\" value={this.state.password} onChange={this.handleChange} />\r\n\r\n                </div>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Login\r\n                </Button>\r\n            </form>\r\n\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport { FetchData } from './components/FetchData';\r\nimport { Register } from './components/Register';\r\nimport { Login } from './components/Login';\r\n\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n    return (\r\n      <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/Register' component={Register} />\r\n        <Route path='/Login' component={Login} />\r\n        <Route path='/fetch-data' component={FetchData} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}